// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @unique @default(uuid())
  firstName      String
  lastName       String
  email          String
  password       String?
  companyName    String?
  role           String     @default("admin")
  routes         Route[]
  campaigns      Campaign[]
  leads          Lead[]
  apiKey         String     @unique @default("0")
  subscriptionId String     @default("0000000000")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  payments       Payment[]
}

model Route {
  id          String     @id @default(uuid())
  routeId     Int        @default(autoincrement())
  name        String
  product     String
  payout      Float
  description String
  url         String
  method      String
  attributes  Json
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  campaigns   Campaign[]
  Lead        Lead[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Campaign {
  id          String   @id @default(uuid())
  name        String
  userId      String
  campId      String
  manager     String
  user        User     @relation(fields: [userId], references: [id])
  routeId     String
  route       Route    @relation(fields: [routeId], references: [id])
  status      Status   @default(active)
  Lead        Lead[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lead_period Int      @default(90)
}

model Seller {
  id     String @id @default(uuid())
  name   String
  apiKey String @unique
}

model Lead {
  id         String    @id @default(uuid())
  firstName  String
  lastName   String?
  phone      String
  email      String?
  address    String?
  status     String
  country    String?
  ip         String?
  sub1       String?
  sub2       String?
  sub3       String?
  sub4       String?
  userId     String
  date       DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  routeId    String
  route      Route     @relation(fields: [routeId], references: [id])
  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Payment {
  id            String   @id @default(uuid())
  amount        Float
  currency      String // e.g., 'USD', 'EUR'
  status        String // e.g., 'pending', 'completed', 'failed', 'refunded'
  paymentMethod String // e.g., 'credit_card', 'paypal', 'bank_transfer'
  transactionId String? // Unique identifier for the transaction from the payment processor
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String? // Optional description of the payment
  receiptUrl    String? // Optional URL to the payment receipt
  metadata      Json? // Optional JSON field for additional payment metadata
}

enum Status {
  active
  inactive
}
