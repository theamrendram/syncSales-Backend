generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String?
  password    String?
  companyName String?
  companyId   String?  @default(uuid())
  role        String   @default("admin")
  apiKey      String   @unique @default("0")
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  leads        Lead[]
  routes       Route[]
  userPlan     UserPlan?
  payments     Payment[]
  campaigns    Campaign[]
  webmaster    Webmaster[]
  subscription Subscription[]
}

model UserPlan {
  id              String    @id @default(uuid())
  userId          String    @unique
  name            String // Optional: Name like "Pro", "Basic", etc.
  price           Float
  currency        String
  billingCycle    String // e.g., "monthly", "yearly"
  maxWebmasters   Int
  dailyLeadsLimit Int
  features        Json?
  isTrial         Boolean   @default(false)
  startDate       DateTime  @default(now())
  endDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Webmaster {
  id        String     @id @default(uuid())
  firstName String
  lastName  String
  email     String     @unique
  password  String?
  apiKey    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  campaigns Campaign[]
}

model Route {
  id          String     @id @default(uuid())
  routeId     Int        @default(autoincrement())
  name        String
  product     String
  payout      Float
  description String
  hasWebhook  Boolean    @default(true)
  url         String?
  method      String?
  attributes  Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  Lead        Lead[]
  campaigns   Campaign[]
}

model Campaign {
  id          String     @id @default(uuid())
  name        String
  userId      String
  campId      String
  manager     String
  routeId     String
  webmasterId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lead_period Int        @default(90)
  user        User       @relation(fields: [userId], references: [id])
  route       Route      @relation(fields: [routeId], references: [id])
  status      Status     @default(active)
  Lead        Lead[]
  webmaster   Webmaster? @relation(fields: [webmasterId], references: [id])

  @@index([campId])
  @@index([status])
  @@index([userId])
  @@index([routeId])
}

model Seller {
  id     String @id @default(uuid())
  name   String
  apiKey String @unique
}

model Lead {
  id              String    @id @default(uuid())
  firstName       String
  lastName        String?
  phone           String
  email           String?
  address         String?
  status          String
  country         String?
  ip              String?
  sub1            String?
  sub2            String?
  sub3            String?
  sub4            String?
  userId          String
  companyId       String?
  date            DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id])
  routeId         String
  route           Route     @relation(fields: [routeId], references: [id])
  campaignId      String?
  webhookResponse Json?
  campaign        Campaign? @relation(fields: [campaignId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([status])
  @@index([date])
  @@index([userId])
  @@index([routeId])
  @@index([campaignId])
  @@index([phone])
  @@index([companyId])
}

model LeadUsage {
  id     String   @default(uuid())
  userId String
  date   DateTime
  count  Int      @default(1)

  @@unique([userId, date])
}

model Payment {
  id            String   @id @default(uuid())
  amount        Float
  currency      String // e.g., 'USD', 'EUR'
  status        String // e.g., 'pending', 'completed', 'failed', 'refunded'
  paymentMethod String // e.g., 'credit_card', 'paypal', 'bank_transfer'
  transactionId String? // Unique identifier for the transaction from the payment processor
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String? // Optional description of the payment
  receiptUrl    String? // Optional URL to the payment receipt
  metadata      Json? // Optional JSON field for additional payment metadata
}

model Subscription {
  id                     String             @id @default(uuid())
  razorpaySubscriptionId String             @unique
  razorpayPaymentId      String
  customerEmail          String
  billingCycle           String
  plan                   String
  status                 SubscriptionStatus @default(active)
  isTrial                Boolean            @default(false)
  startDate              DateTime           @default(now())
  endDate                DateTime
  userId                 String?
  user                   User?              @relation(fields: [userId], references: [id])
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@index([razorpaySubscriptionId])
  @@index([status])
}

enum SubscriptionStatus {
  active
  trialing
  cancelled
  expired
}

enum Status {
  active
  inactive
}
