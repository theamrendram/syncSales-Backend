generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(uuid())
  firstName               String
  lastName                String
  email                   String               @unique
  password                String?
  companyName             String?
  role                    String               @default("admin")
  apiKey                  String               @unique @default("0")
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  address                 String?
  phone                   String?
  companyId               String?              @default(uuid())
  campaigns               Campaign[]
  leads                   Lead[]
  ownedOrganizations      Organization[]       @relation("OrganizationOwner")
  organizationMemberships OrganizationMember[]
  payments                Payment[]
  routes                  Route[]
  subscription            Subscription[]
  userPlan                UserPlan?            @relation("UserToUserPlan")
  webmaster               Webmaster[]
}

model Organization {
  id            String               @id @default(uuid())
  name          String
  ownerId       String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  description   String?
  domain        String?
  logo          String?
  campaigns     Campaign[]
  leads         Lead[]
  owner         User                 @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members       OrganizationMember[]
  payments      Payment[]
  Role          Role[]
  routes        Route[]
  subscriptions Subscription[]
  userPlans     UserPlan[]
  webmasters    Webmaster[]

  @@index([ownerId])
}

model Role {
  id             String               @id @default(uuid())
  name           String
  description    String?
  permissions    Json
  organizationId String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  members        OrganizationMember[]
  organization   Organization         @relation(fields: [organizationId], references: [id])

  @@unique([name, organizationId])
  @@index([organizationId])
}

model OrganizationMember {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  roleId         String
  status         MemberStatus @default(active)
  joinedAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role         @relation(fields: [roleId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([roleId])
}

model UserPlan {
  id              String        @id @default(uuid())
  userId          String        @unique
  name            String
  price           Float
  currency        String
  billingCycle    String
  maxWebmasters   Int
  dailyLeadsLimit Int
  features        Json?
  isTrial         Boolean       @default(false)
  startDate       DateTime      @default(now())
  endDate         DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id])
  user            User          @relation("UserToUserPlan", fields: [userId], references: [id])

  @@index([organizationId])
}

model Webmaster {
  id             String        @id @default(uuid())
  firstName      String
  lastName       String
  email          String        @unique
  password       String?
  apiKey         String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  organizationId String?
  isActive       Boolean       @default(true)
  campaigns      Campaign[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@index([organizationId])
}

model Route {
  id             String        @id @default(uuid())
  userId         String
  product        String
  payout         Float
  name           String
  attributes     Json?
  method         String?
  url            String?
  routeId        Int           @default(autoincrement())
  description    String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  hasWebhook     Boolean       @default(true)
  deletedAt      DateTime?
  organizationId String?
  campaigns      Campaign[]
  Lead           Lead[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@index([organizationId])
}

model Campaign {
  id             String        @id @default(uuid())
  name           String
  userId         String
  routeId        String
  campId         String
  status         Status        @default(active)
  manager        String
  createdAt      DateTime      @default(now())
  lead_period    Int           @default(90)
  updatedAt      DateTime      @updatedAt
  webmasterId    String?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  route          Route         @relation(fields: [routeId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  webmaster      Webmaster?    @relation(fields: [webmasterId], references: [id])
  Lead           Lead[]

  @@index([campId])
  @@index([status])
  @@index([userId])
  @@index([routeId])
  @@index([organizationId])
}

model Seller {
  id     String @id @default(uuid())
  name   String
  apiKey String @unique
}

model Lead {
  id              String        @id @default(uuid())
  firstName       String
  lastName        String?
  phone           String
  email           String?
  address         String?
  status          String
  sub1            String?
  sub2            String?
  sub3            String?
  sub4            String?
  campaignId      String?
  routeId         String
  userId          String
  date            DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  ip              String?
  country         String?
  webhookResponse Json?
  companyId       String?
  organizationId  String?
  campaign        Campaign?     @relation(fields: [campaignId], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])
  route           Route         @relation(fields: [routeId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([date])
  @@index([userId])
  @@index([routeId])
  @@index([campaignId])
  @@index([phone])
  @@index([companyId])
  @@index([organizationId])
}

model LeadUsage {
  id             String   @default(uuid())
  userId         String
  date           DateTime
  count          Int      @default(1)
  organizationId String?

  @@unique([userId, date])
  @@index([organizationId])
}

model Payment {
  id             String        @id @default(uuid())
  amount         Float
  currency       String
  status         String
  paymentMethod  String
  transactionId  String?
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  description    String?
  receiptUrl     String?
  metadata       Json?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@index([organizationId])
}

model Subscription {
  id                     String             @id @default(uuid())
  razorpayPaymentId      String
  billingCycle           String
  plan                   String
  userId                 String?
  createdAt              DateTime           @default(now())
  endDate                DateTime
  isTrial                Boolean            @default(false)
  razorpaySubscriptionId String             @unique
  startDate              DateTime           @default(now())
  status                 SubscriptionStatus @default(active)
  updatedAt              DateTime           @updatedAt
  customerEmail          String
  organizationId         String?
  organization           Organization?      @relation(fields: [organizationId], references: [id])
  user                   User?              @relation(fields: [userId], references: [id])

  @@index([razorpaySubscriptionId])
  @@index([status])
  @@index([organizationId])
}

enum SubscriptionStatus {
  active
  trialing
  cancelled
  expired
}

enum Status {
  active
  inactive
}

enum MemberStatus {
  active
  inactive
  pending
  suspended
}
